import vkbottle
import os
import tracemalloc
import connection_for_db
import time

from config import token
from vkbottle import BaseStateGroup, Keyboard, OpenLink,Text, GroupEventType, GroupTypes, KeyboardButtonColor, EMPTY_KEYBOARD
from vkbottle.bot import Bot, Message


bot = Bot(token=token)

class MenuState(BaseStateGroup):
    state_start = 1
    state_menu = 2
    state_amba = 3
    state_event = 4
    state_city = 5
    state_city_db = 6
    state_number = 7
    state_number_db = 8
    state_all_event = 9
    state_category = 10
    state_online = 11
    state_offline = 12
    state_type = 13
    state_type_db = 14
    state_reg_1 = 15
    state_reg_2 = 16
    state_reg_final = 17

async def number():
    current_year = time.strftime('%Y')
    first_number = 2018
    current_number = int(current_year)-first_number
    return int(current_number)




#----------------START
@bot.on.private_message(state = None)
async def start_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    first = user[0].first_name
    last =user[0].last_name
    name = first + ' ' + last
    f = 'https://vk.com/id'
    link = f + str(id)
    num = await number()
    temp = await connection_for_db.bd_registration(id, name, link, num)
    if (temp == 1):
        await message.answer(
            f"üëã–ü—Ä–∏–≤–µ—Ç, {user[0].first_name}! \n \n –¢—ã –ø–æ–ø–∞–ª –≤ –≥—Ä—É–ø–ø—É –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–æ–º.\n \n –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            keyboard=(
                Keyboard()
                .add(Text("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", {"cmd": "next_reg"}))
                .get_json()
            ),
        )
    elif (temp == 0):
        await message.answer(
            "–ö—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –±–æ—Ç–∞, –Ω–æ —É–∂–µ —Å–Ω–æ–≤–∞ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            keyboard = (
                          Keyboard()
                              .add(Text("–ú–µ–Ω—é", {"cmd": "next_1"}),color=KeyboardButtonColor.POSITIVE)
                              .get_json()
                      ),
        )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_start)


@bot.on.private_message(state=[
    MenuState.state_start],
    payload={"cmd": "next_reg"})
async def city_handler(message: Message):
    await message.answer(
         f"–í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è! \n \n –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º",
        keyboard=(EMPTY_KEYBOARD))
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_1)

@bot.on.private_message(state =
    MenuState.state_reg_1,
    text='<msg>')
async def start_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    temp = await connection_for_db.bd_registration_continue(id, msg)
    if (temp == 1):
        await message.answer(
            f"–ì–æ—Ä–æ–¥ –∑–∞–ø–∏—Å–∞–Ω! \n \n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
            keyboard=(EMPTY_KEYBOARD))
    else:
        await message.answer(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_2)

@bot.on.private_message(state =
    MenuState.state_reg_2,
    text='<msg>')
async def start_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    temp = await connection_for_db.bd_registration_continue_2(id, msg)
    if (temp == 1):
        await message.answer(
            f"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞–ø–∏—Å–∞–Ω! \n \n –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–Ω–∞",
            keyboard=(
                Keyboard()
                    .add(Text("–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –í–ö, Welcome", {"cmd": "final_reg"}))
                    .get_json()
            ),)
    else:
        await message.answer(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_final)

#----------------MENU
@bot.on.private_message(state = [
    MenuState.state_start,
    MenuState.state_reg_final,
    MenuState.state_amba,
    MenuState.state_event,
    MenuState.state_city,
    MenuState.state_number,
    MenuState.state_category,
    MenuState.state_type,
    MenuState.state_all_event,
    MenuState.state_online,
    MenuState.state_offline],
    payload=[{"cmd": "back_menu"},{"cmd": "back_1"},{"cmd": "next_1"}, {"cmd": "final_reg"}]) #–ú–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–≤
async def menu_handler(message: Message):
    await message.answer(
        f"----------–ú–ï–ù–Æ---------- \n \n –í–∫–ª–∞–¥–∫–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—ã ‚Äì –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –∏ –±—ã–ª–∏.\n \n –í–∫–ª–∞–¥–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ‚Äì –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏",
        keyboard=(
            Keyboard()
            .add(Text("–ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã", {"cmd": "ambo"}))
            .add(Text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", {"cmd": "event"}))
            .get_json()
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_menu)



#----------------AMBA
@bot.on.private_message(state=[
    MenuState.state_menu,
    MenuState.state_city,
    MenuState.state_number,
    MenuState.state_number_db,
    MenuState.state_city_db],
    payload=[{"cmd": "ambo"},{"cmd": "back_3"}, {"cmd": "back_1"}, {"cmd": "back_number"},{"cmd": "back_city"}])
async def amba_handler(message: Message):
    await message.answer(
         "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º–∏. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞—Ö, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!",
         keyboard=(
            Keyboard()
            .add(Text("–ù–∞–±–æ—Ä", {"cmd": "number"}))
            .add(Text("–ì–æ—Ä–æ–¥", {"cmd": "city"}))
            .row()
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_amba)



#----------------CITY
@bot.on.private_message(state=[
    MenuState.state_amba],
    payload={"cmd": "city"})
async def city_handler(message: Message):
    await message.answer(
         "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥",
         keyboard=(
            Keyboard()
            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_city"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_city)


@bot.on.private_message(state=[
    MenuState.state_city,
    MenuState.state_city_db],
    text="<msg>")
async def city_item_handler(message: Message, msg):
    table_city = await connection_for_db.bd_city(msg)
    if (table_city != 9999999999):
        await message.answer(
            f"{table_city}",
         keyboard=(
            Keyboard()
            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_city"}),color=KeyboardButtonColor.PRIMARY)
        ),)
    else:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –∏–∑ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç :(")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_city_db)



#----------------NUMBER
@bot.on.private_message(state=[
    MenuState.state_amba],
    payload={"cmd": "number"})
async def number_handler(message: Message):
    await message.answer(
         "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –Ω–∞–±–æ—Ä–∞",
         keyboard=(
            Keyboard()
            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_number"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_number)


@bot.on.private_message(state=[
    MenuState.state_number,
    MenuState.state_number_db],
    text="<msg>")
async def number_item_handler(message: Message, msg):
    try:
        if (type(int(msg)) == int):
            table_number = await connection_for_db.bd_number_check(msg)
            if (table_number != 9999999999):
                await message.answer(
                    f"{table_number}",
                    keyboard = (
                        Keyboard()
                           .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                           .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_number"}),color=KeyboardButtonColor.PRIMARY)
                               ),)
            else:
                await message.answer(
                    "–£–≤—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except:
        await message.answer(
        "–û–π, –ø–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :(")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_number_db)



#----------------EVENT
@bot.on.private_message(state=[
    MenuState.state_menu,
    MenuState.state_category,
    MenuState.state_all_event],
    payload=[{"cmd": "event"},{"cmd": "back_1"},{"cmd": "back_all"},{"cmd": "back_category"}])
async def event_handler(message: Message):
    await message.answer(
         "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. –ï—Å–ª–∏ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∞–ª–∏—Å—å –∏–¥–µ–∏, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å, —Ç–æ —Å–º–µ–ª–æ –±–µ—Ä–∏ –∏—Ö –æ—Ç—Å—é–¥–∞. –£ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—Å—Ç—å —Å–≤–æ–π –≥–∞–π–¥ :3",
         keyboard=(
            Keyboard()
            .add(Text("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ", {"cmd": "all_event"}))
            .add(Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", {"cmd": "category"}))
            .row()
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_1"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_event)



#----------------CATEGORY
@bot.on.private_message(state=[
    MenuState.state_event,
    MenuState.state_type,
    MenuState.state_online,
    MenuState.state_offline,
    MenuState.state_type_db],
    payload=[{"cmd": "category"},{"cmd": "back_1"},{"cmd": "back_type"},{"cmd": "back_online"},{"cmd": "back_offline"}, {"cmd": "back_user_type"}])
async def number_handler(message: Message):
    await message.answer(
         "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º. \n \n –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: \n 1)–û–Ω–ª–∞–π–Ω \n 2)–û—Ñ–ª–∞–π–Ω ",
         keyboard=(
            Keyboard()
            .add(Text("–û–Ω–ª–∞–π–Ω", {"cmd": "online"}))
            .add(Text("–û—Ñ–ª–∞–π–Ω", {"cmd": "offline"}))
            .add(Text("–¢–∏–ø", {"cmd": "type"}))
            .row()
            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_category"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_category)

#----------------ONLINE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_online],
    payload = {"cmd": "online"})
async def number_item_handler(message: Message):
    table_online = await connection_for_db.bd_online()
    await message.answer(
        f"{table_online}",
        keyboard=(
            Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_online"}),color=KeyboardButtonColor.PRIMARY)
        ), )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_online)

#----------------OFFLINE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_offline],
    payload = {"cmd": "offline"})
async def number_item_handler(message: Message):
    table_offline = await connection_for_db.bd_offline()
    await message.answer(
        f"{table_offline}",
        keyboard=(
            Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_offline"}),color=KeyboardButtonColor.PRIMARY)
        ), )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_offline)

#----------------TYPE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_type_db],
    payload={"cmd": "type"})
async def city_handler(message: Message):
    table_type = await connection_for_db.bd_type()
    await message.answer(
         f"–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è \n \n {table_type}",
         keyboard=(
            Keyboard()
            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_type"}),color=KeyboardButtonColor.PRIMARY)
        ),
    )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_type)


@bot.on.private_message(state=[
    MenuState.state_type,
    MenuState.state_type_db],
    text="<msg>")
async def city_item_handler(message: Message, msg):
    if (type(int(msg)) == int):
        table_user_type = await connection_for_db.bd_user_type(msg)
        if (table_user_type != 999999999999):
            await message.answer(
                f"{table_user_type}",
                keyboard=(
                    Keyboard()
                        .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                        .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_user_type"}),color=KeyboardButtonColor.PRIMARY)
                ),
            )
        else:
            await message.answer(
                f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—â–µ –Ω–µ—Ç")
    else:
        await message.answer(
            f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :(")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_type_db)



#----------------ALL_EVENT
@bot.on.private_message(state=[
    MenuState.state_event],
    payload={"cmd": "all_event"})
async def number_item_handler(message: Message):
    table_all_event = await connection_for_db.bd_all_event()
    await message.answer(
        f"{table_all_event}",
        keyboard = (
                   Keyboard()
                       .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                       .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_all"}),color=KeyboardButtonColor.PRIMARY)
                   ),
        )
    await bot.state_dispenser.set(message.peer_id, MenuState.state_all_event)


#----------------SORRY
@bot.on.private_message()
async def sorry_handler(_):
    return "–ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ª—É—á—à–µ –∫–Ω–æ–ø–∫–∞–º–∏",

bot.run_forever()