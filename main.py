import vkbottle
import os
import tracemalloc
import connection_for_db
import time
import random

from config import token
from vkbottle import BaseStateGroup, Keyboard, OpenLink,Text, GroupEventType, GroupTypes, KeyboardButtonColor, EMPTY_KEYBOARD, VKAPIError
from vkbottle.bot import Bot, Message
from list import list_words

tracemalloc.start()

bot = Bot(token=token)

class MenuState(BaseStateGroup):
    state_start = 1
    state_menu = 2
    state_amba = 3
    state_event = 4
    state_city = 5
    state_city_db = 6
    state_number = 7
    state_number_db = 8
    state_all_event = 9
    state_category = 10
    state_online = 11
    state_offline = 12
    state_type = 13
    state_type_db = 14
    state_reg_1 = 15
    state_reg_2 = 16
    state_reg_final = 17
    state_all_guid = 18
    state_reg_final_all = 19
    state_online_offline = 20


async def check_month(id):
    current_month = time.strftime('%m')
    tempt_ = await connection_for_db.bd_check_id(id)
    try:
        tempt_id = int(str(tempt_).replace("(", '').replace(")", '').replace(",", ''))
        if int(id) == tempt_id:
            return 1
        else:
            return 0
    except:
        if current_month < '06' or current_month > '08':
            return 1
        else:
            return 0

async def number():
    current_year = time.strftime('%Y')
    first_number = 2018
    current_number = int(current_year)-first_number
    return int(current_number)



#----------------JOIN GROUP
# @bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
# async def group_join_handler(event: GroupTypes.GroupJoin):
#     try:
#         await bot.api.messages.send(
#             peer_id=event.object.user_id,
#             message="üëã–ü—Ä–∏–≤–µ—Ç! \n \n –ì–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º–∏ –í–ö! \n \n –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—ã –Ω–∞—á–Ω–µ–º)",
#             random_id=0,
#             keyboard=(EMPTY_KEYBOARD)
#         )
#     except VKAPIError(901):
#         pass



#----------------START
@bot.on.private_message(state = None)
async def start_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        user = await bot.api.users.get(message.from_id)
        id = user[0].id
        first = user[0].first_name
        last =user[0].last_name
        name = first + ' ' + last
        name_gem = 'üîπ' + first + ' ' + last
        link_name = '@' + 'id' + str(id) + '(' + name_gem + ')'
        result = await message.ctx_api.users.get(message.from_id, fields=["bdate"])
        bdate = str(result[0].bdate)
        city = await bot.api.users.get(message.from_id, fields=["city"])
        city_1 = str(city[0].city).replace("=", '').replace("'", '').partition("e")[2]
        f = 'https://vk.com/id'
        link = f + str(id)
        num = await number()
        temp = await connection_for_db.bd_registration(id, name, link_name, link, num, bdate, city_1)
        if (temp == 1):
            await message.answer(
                f"üëã–ü—Ä–∏–≤–µ—Ç, {user[0].first_name}! \n \n –¢—ã –ø–æ–ø–∞–ª –≤ –≥—Ä—É–ø–ø—É –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–≤! –Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—Å—Ç–≤–æ–º.\n \n –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –¥–∞–≤–∞–π –∑–∞–∫–æ–Ω—á–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
                keyboard=(
                    Keyboard()
                        .add(Text("–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", {"cmd": "next_reg"}))
                        .get_json()
                ),
            )
        elif (temp == 0):
            await message.answer(
                "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —É–∂–µ —Å–Ω–æ–≤–∞ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                keyboard = (
                              Keyboard()
                                  .add(Text("–ú–µ–Ω—é", {"cmd": "next_1"}),color=KeyboardButtonColor.POSITIVE)
                                  .get_json()
                          ),
            )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_start)



@bot.on.private_message(state=[
    MenuState.state_start],
    payload={"cmd": "next_reg"})
async def city_handler(message: Message):
    await message.answer(
         f"–í–≤–æ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è! \n \n –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —è–≤–ª—è–µ—à—å—Å—è –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º",
        keyboard=(EMPTY_KEYBOARD))
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_1)

@bot.on.private_message(state =
    MenuState.state_reg_1,
    text='<msg>')
async def start_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    temp = await connection_for_db.bd_registration_continue(id, msg)
    if (temp == 1):
        await message.answer(
            f"–ì–æ—Ä–æ–¥ –∑–∞–ø–∏—Å–∞–Ω! \n \n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
            keyboard=(EMPTY_KEYBOARD))
    else:
        await message.answer(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_2)

@bot.on.private_message(state =
    MenuState.state_reg_2,
    text='<msg>')
async def start_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    temp = await connection_for_db.bd_registration_continue_2(id, msg)
    if (temp == 1):
        await message.answer(
            f"–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∑–∞–ø–∏—Å–∞–Ω! \n \n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—ã –º–æ–≥–ª–∏ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: –Ø –¥–∏–∑–∞–π–Ω–µ—Ä, —Ä–∞–±–æ—Ç–∞—é –≤ —Ñ–æ—Ç–æ—à–æ–ø–µ –∏ –º–æ–≥—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ",)
    else:
        await message.answer(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_final)


@bot.on.private_message(state = [
    MenuState.state_reg_final],
    text='<msg>')
async def start_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    temp = await connection_for_db.bd_registration_continue_info(id, msg)
    if (temp == 1):
        await message.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞! \n \n –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–Ω–∞",
            keyboard=(
                Keyboard()
                    .add(Text("–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –í–ö, Welcome", {"cmd": "final_reg"}))
                    .get_json()
            ),)
    else:
        await message.answer(
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
    await bot.state_dispenser.set(message.peer_id, MenuState.state_reg_final_all)



#----------------MENU
@bot.on.private_message(state = [
    MenuState.state_start,
    MenuState.state_reg_final_all,
    MenuState.state_amba,
    MenuState.state_event,
    MenuState.state_city,
    MenuState.state_city_db,
    MenuState.state_number,
    MenuState.state_number_db,
    MenuState.state_category,
    MenuState.state_type,
    MenuState.state_type_db,
    MenuState.state_all_event,
    MenuState.state_online,
    MenuState.state_offline,
    MenuState.state_online_offline,
    MenuState.state_all_guid],
    payload=[{"cmd": "back_menu"},{"cmd": "back_1"},{"cmd": "next_1"}, {"cmd": "final_reg"}]) #–ú–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–≤
async def menu_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Menu'
        await bd_handler(message, text)
        list = random.choice(list_words)
        await message.answer(
            f"üîª‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì–ú–ï–ù–Æ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äìüîª \n \n {list} \n \n ‚û§ –í–∫–ª–∞–¥–∫–∞ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä—ã: \n –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \n –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞—Ö.\n \n ‚û§ –í–∫–ª–∞–¥–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ \n –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ –≥–∞–π–¥–∞—Ö.\n \n üî∫‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äìüî∫",
            keyboard=(
                Keyboard()
                .add(Text("–ê–º–±–∞—Å—Å–∞–¥–æ—Ä—ã", {"cmd": "ambo"}))
                .add(Text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", {"cmd": "event"}))
                .row()
                .add(OpenLink("https://vk.com/app6013442_-207473867?form_id=1#form_id=1", "–ü–æ–º–æ—â—å"), color=KeyboardButtonColor.PRIMARY)
                .get_json()
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_menu)



#----------------AMBA
@bot.on.private_message(state=[
    MenuState.state_menu,
    MenuState.state_city,
    MenuState.state_number,
    MenuState.state_number_db,
    MenuState.state_city_db],
    payload=[{"cmd": "ambo"},{"cmd": "back_3"}, {"cmd": "back_1"}, {"cmd": "back_number"},{"cmd": "back_city"}])
async def amba_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Ambassador'
        await bd_handler(message, text)
        await message.answer(
             "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞–º–∏. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞—Ö, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –∏ –Ω–∞–π—Ç–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!",
             keyboard=(
                Keyboard()
                .add(Text("–ù–∞–±–æ—Ä", {"cmd": "number"}))
                .add(Text("–ì–æ—Ä–æ–¥", {"cmd": "city"}))
                .row()
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_amba)



#----------------CITY
@bot.on.private_message(state=[
    MenuState.state_amba],
    payload={"cmd": "city"})
async def city_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'City'
        await bd_handler(message, text)
        await message.answer(
             "–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥",
             keyboard=(
                Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_city"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_city)


@bot.on.private_message(state=[
    MenuState.state_city,
    MenuState.state_city_db],
    text="<msg>")
async def city_item_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        table_city = await connection_for_db.bd_city(msg)
        if (table_city != 9999999999):
            await message.answer(
                f"{table_city}",
             keyboard=(
                Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_city"}),color=KeyboardButtonColor.PRIMARY)
            ),)
        else:
            await message.answer(
                "–ü–æ—Ö–æ–∂–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–∞ –∏–∑ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç :(")
        await bot.state_dispenser.set(message.peer_id, MenuState.state_city_db)



#----------------NUMBER
@bot.on.private_message(state=[
    MenuState.state_amba],
    payload={"cmd": "number"})
async def number_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Number'
        await bd_handler(message, text)
        await message.answer(
             "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –Ω–∞–±–æ—Ä–∞",
             keyboard=(
                Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_number"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_number)


@bot.on.private_message(state=[
    MenuState.state_number,
    MenuState.state_number_db],
    text="<msg>")
async def number_item_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        try:
            if (type(int(msg)) == int):
                table_number = await connection_for_db.bd_number_check(msg)
                if (table_number != 9999999999):
                    await message.answer(
                        f"{table_number}",
                        keyboard = (
                            Keyboard()
                               .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                               .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_number"}),color=KeyboardButtonColor.PRIMARY)
                                   ),)
                else:
                    await message.answer(
                        "–£–≤—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except:
            await message.answer(
            "–û–π, –ø–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :(")
        await bot.state_dispenser.set(message.peer_id, MenuState.state_number_db)



#----------------EVENT
@bot.on.private_message(state=[
    MenuState.state_menu,
    MenuState.state_category,
    MenuState.state_all_event,
    MenuState.state_all_guid],
    payload=[{"cmd": "event"},{"cmd": "back_1"},{"cmd": "back_all"},{"cmd": "back_category"},{"cmd": "back_all_g"}])
async def event_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Event'
        await bd_handler(message, text)
        await message.answer(
             "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏. –ï—Å–ª–∏ —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∞–ª–∏—Å—å –∏–¥–µ–∏, —á—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å, —Ç–æ —Å–º–µ–ª–æ –±–µ—Ä–∏ –∏—Ö –æ—Ç—Å—é–¥–∞. –£ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—Å—Ç—å —Å–≤–æ–π –≥–∞–π–¥ :3",
             keyboard=(
                Keyboard()
                .add(Text("–í—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", {"cmd": "all_event"}))
                .add(Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", {"cmd": "category"}))
                .row()
                .add(Text("–í—Å–µ –≥–∞–π–¥—ã", {"cmd": "all_guid"}))
                .row()
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_1"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_event)



#----------------CATEGORY
@bot.on.private_message(state=[
    MenuState.state_event,
    MenuState.state_type,
    MenuState.state_online,
    MenuState.state_offline,
MenuState.state_online_offline,
    MenuState.state_type_db],
    payload=[{"cmd": "category"}, {"cmd": "back_1"}, {"cmd": "back_type"}, {"cmd": "back_online"}, {"cmd": "back_offline"}, {"cmd": "back_online/offline"}, {"cmd": "back_user_type"}])
async def number_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        await message.answer(
             "–≠—Ç–æ —Ä–∞–∑–¥–µ–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º. \n \n –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–∏–ø—É —Ñ–æ—Ä–º–∞—Ç–∞: \n üî∂–û–Ω–ª–∞–π–Ω \n üî∑–û—Ñ–ª–∞–π–Ω \n ‚ô¶Ô∏è–õ—é–±–æ–µ \n \n –ò–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É —Ç–∏–ø –∏ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ.",
             keyboard=(
                Keyboard()
                .add(Text("–û–Ω–ª–∞–π–Ω", {"cmd": "online"}))
                .add(Text("–û—Ñ–ª–∞–π–Ω", {"cmd": "offline"}))
                .add(Text("–õ—é–±–æ–µ", {"cmd": "online/offline"}))
                .row()
                .add(Text("–¢–∏–ø", {"cmd": "type"}))
                .row()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_category"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_category)

#----------------ONLINE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_online],
    payload = {"cmd": "online"})
async def number_item_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Online'
        await bd_handler(message, text)
        table_online = await connection_for_db.bd_online()
        await message.answer(
            f"{table_online}",
            keyboard=(
                Keyboard()
                    .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                    .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_online"}),color=KeyboardButtonColor.PRIMARY)
            ), )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_online)

#----------------OFFLINE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_offline],
    payload = {"cmd": "offline"})
async def number_item_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Offline'
        await bd_handler(message, text)
        table_offline = await connection_for_db.bd_offline()
        await message.answer(
            f"{table_offline}",
            keyboard=(
                Keyboard()
                    .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                    .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_offline"}),color=KeyboardButtonColor.PRIMARY)
            ), )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_offline)

#----------------ONLINE/OFFLINE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_online],
    payload = {"cmd": "online/offline"})
async def number_item_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'online/offline'
        await bd_handler(message, text)
        table_online = await connection_for_db.bd_online_offline()
        await message.answer(
            f"{table_online}",
            keyboard=(
                Keyboard()
                    .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                    .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_online/offline"}),color=KeyboardButtonColor.PRIMARY)
            ), )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_online_offline)

#----------------TYPE
@bot.on.private_message(state=[
    MenuState.state_category,
    MenuState.state_type_db],
    payload={"cmd": "type"})
async def city_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'Type'
        await bd_handler(message, text)
        table_type = await connection_for_db.bd_type()
        await message.answer(
             f"–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è \n \n {table_type}",
             keyboard=(
                Keyboard()
                .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_type"}),color=KeyboardButtonColor.PRIMARY)
            ),
        )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_type)


@bot.on.private_message(state=[
    MenuState.state_type,
    MenuState.state_type_db],
    text="<msg>")
async def city_item_handler(message: Message, msg):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        if (type(int(msg)) == int):
            table_user_type = await connection_for_db.bd_user_type(msg)
            if (table_user_type != 999999999999):
                await message.answer(
                    f"{table_user_type}",
                    keyboard=(
                        Keyboard()
                            .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                            .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_user_type"}),color=KeyboardButtonColor.PRIMARY)
                    ),
                )
            else:
                await message.answer(
                    f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –µ—â–µ –Ω–µ—Ç")
        else:
            await message.answer(
                f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ :(")
        await bot.state_dispenser.set(message.peer_id, MenuState.state_type_db)



#----------------ALL_EVENT
@bot.on.private_message(state=[
    MenuState.state_event],
    payload={"cmd": "all_event"})
async def number_item_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'All Event'
        await bd_handler(message, text)
        table_all_event = await connection_for_db.bd_all_event()
        await message.answer(
            f"{table_all_event}",
            keyboard = (
                       Keyboard()
                           .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                           .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_all"}),color=KeyboardButtonColor.PRIMARY)
                       ),
            )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_all_event)



#----------------ALL_GUID
@bot.on.private_message(state=[
    MenuState.state_event],
    payload={"cmd": "all_guid"})
async def number_item_handler(message: Message):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    chk = await check_month(id)
    if chk == 1:
        text = 'All Guid'
        await bd_handler(message, text)
        table_all_event = await connection_for_db.bd_all_guid()
        await message.answer(
            f"{table_all_event}",
            keyboard = (
                       Keyboard()
                           .add(Text("–ú–µ–Ω—é", {"cmd": "back_menu"}),color=KeyboardButtonColor.PRIMARY)
                           .add(Text("–ù–∞–∑–∞–¥", {"cmd": "back_all_g"}),color=KeyboardButtonColor.PRIMARY)
                       ),
            )
        await bot.state_dispenser.set(message.peer_id, MenuState.state_all_guid)


async def bd_handler(message, text):
    user = await bot.api.users.get(message.from_id)
    id = user[0].id
    await connection_for_db.bd_last_visit(id, text)


#----------------SORRY
@bot.on.private_message()
async def sorry_handler(_):
    return "–ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ª—É—á—à–µ –∫–Ω–æ–ø–∫–∞–º–∏",



bot.run_forever()

#----------------BDATE
# async def bdate_handler():
#     now_d = time.strftime("%d")
#     now_m = time.strftime("%m")
#     bdate_d = int(str(await connection_for_db.bd_date(now_d)).replace("'",'').replace(',','').replace(')','').replace('(','').replace('[','').replace(']',''))
#     bdate_m = int(str(await connection_for_db.bd_month(now_m)).replace("'", '').replace(',','').replace(')','').replace('(','').replace('[','').replace(']',''))
#     name = str(await connection_for_db.bd_name(bdate_d)).replace("'", '').replace(',','').replace(')','').replace('(','').replace('[','').replace(']','')
#     date_o = int((int(now_d) - int(bdate_d)) * (-1))
#     print(bdate_m, bdate_d, date_o)
#     if (int(bdate_m) == int(now_m)):
#         if (date_o == 7 or date_o == 6 or date_o == 5):
#             return(f"–ß–µ—Ä–µ–∑ {date_o} –¥–Ω–µ–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ —É {name}")
#         elif (date_o == 4 or date_o == 3 or date_o == 2):
#             return(f"–ß–µ—Ä–µ–∑ {date_o} –¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ —É {name}")
#         elif (date_o == 1):
#             return(f"–ß–µ—Ä–µ–∑ {date_o} –¥–µ–Ω—å –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ —É {name}")
#         elif (date_o == 0):
#             return(f"–°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ —É {name}")
#         elif (date_o > 8):
#             temp = random.choice(list_words)
#             return(f"{temp}")
#     else:
#         temp = random.choice(list_words)
#         return (f"{temp}")